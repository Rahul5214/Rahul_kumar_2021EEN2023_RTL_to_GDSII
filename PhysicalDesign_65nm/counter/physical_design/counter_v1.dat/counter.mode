if {![namespace exists ::IMEX]} { namespace eval ::IMEX {} }
set ::IMEX::dataVar [file dirname [file normalize [info script]]]
set ::IMEX::libVar ${::IMEX::dataVar}/libs

catch { setAnalysisMode -analysisType bcwc }
catch { setAnalysisMode -checkType setup }
catch { setAnalysisMode -clkSrcPath true }
catch { setAnalysisMode -clockPropagation sdcControl }
catch { setAnalysisMode -skew true }
catch { setAnalysisMode -virtualIPO false }
catch { setOptMode -activeHoldViews { best_case } }
catch { setOptMode -activeSetupViews { worst_case } }
catch { setOptMode -autoSetupViews { worst_case} }
catch { setOptMode -drcMargin 0 }
catch { setOptMode -effort high }
catch { setOptMode -preserveAllSequential false }
catch { setOptMode -setupTargetSlack 0 }
setExtractRCMode  -engine preRoute
catch { setCTSMode -moveGateLimit 25 }
catch {setNanoRouteMode -quiet -drouteUseMinSpacingForBlockage auto}
catch {setNanoRouteMode -quiet -grouteExpCurrentTimingReport "/tmp/innovus_temp_12509_bessel1_een212023_7yX9bY/nanoroute_tmp_1UcpXO/.timing_report1.d"}
catch {setNanoRouteMode -quiet -grouteExpTdStdDelay 40.400000}
catch {setNanoRouteMode -quiet -routeStrictlyHonorNonDefaultRule "false"}
catch {setNanoRouteMode -quiet -routeWithSiDriven true}
catch {setNanoRouteMode -quiet -routeWithSiPostRouteFix false}
catch {setNanoRouteMode -quiet -routeWithTimingDriven true}
catch {setNanoRouteMode -quiet -timingEngine ""}

catch { setPlaceMode -place_design_floorplan_mode false }
catch { setIlmMode -keepHighFanoutPorts true -keepLoopBack false -keepFlatten true }
catch { setVerifyGeometryMode -antenna false }
catch { setVerifyGeometryMode -area {0 0 0 0} }
catch { setVerifyGeometryMode -diffCellViol true }
catch { setVerifyGeometryMode -error 1000 }
catch { setVerifyGeometryMode -implantCheck true }
catch { setVerifyGeometryMode -insuffMetalOverlap true }
catch { setVerifyGeometryMode -maxNonPrefLength -1 }
catch { setVerifyGeometryMode -maxWidth true }
catch { setVerifyGeometryMode -mergedMGridCheck true }
catch { setVerifyGeometryMode -minArea true }
catch { setVerifyGeometryMode -minHole true }
catch { setVerifyGeometryMode -minimumCut true }
catch { setVerifyGeometryMode -minSpacing true }
catch { setVerifyGeometryMode -minStep true }
catch { setVerifyGeometryMode -minWidth true }
catch { setVerifyGeometryMode -offMGrid true }
catch { setVerifyGeometryMode -offRGrid false }
catch { setVerifyGeometryMode -overlap true }
catch { setVerifyGeometryMode -padFillerCellsOverlap true }
catch { setVerifyGeometryMode -pinInBlkg false }
catch { setVerifyGeometryMode -regRoutingOnly false }
catch { setVerifyGeometryMode -routingBlkgPinOverlap true }
catch { setVerifyGeometryMode -routingCellBlkgOverlap true }
catch { setVerifyGeometryMode -sameCellViol false }
catch { setVerifyGeometryMode -sameNet true }
catch { setVerifyGeometryMode -short true }
catch { setVerifyGeometryMode -stackedViasOnRegNet false }
catch { setVerifyGeometryMode -useNonDefaultSpacing false }
catch { setVerifyGeometryMode -viaEnclosure true }
catch { setVerifyGeometryMode -wireExt true }
catch { setUsefulSkewMode -ecoRoute false }
catch { setSrouteMode -viaConnectToShape noshape }
catch { set_verify_drc_mode -area {0 0 0 0} }
catch { set_verify_drc_mode -check_implant true }
catch { set_verify_drc_mode -check_implant_across_rows false }
catch { set_verify_drc_mode -check_ndr_spacing false }
catch { set_verify_drc_mode -check_same_via_cell false }
catch { set_verify_drc_mode -disable_rules "" }
catch { set_verify_drc_mode -exclude_pg_net false }
catch { set_verify_drc_mode -ignore_trial_route false }
catch { set_verify_drc_mode -limit 1000 }
catch { set_verify_drc_mode -report ${::IMEX::libVar}/misc/counter.drc.rpt }
catch { setDelayCalMode -enable_high_fanout true }
catch { setDelayCalMode -eng_copyNetPropToNewNet true }
catch { setDelayCalMode -engine aae }
catch { setDelayCalMode -ignoreNetLoad false }
catch { setTrialRouteMode -handlePreroute true }
catch { setTrialRouteMode -keepMarkedOptRoutes true }
catch { setAddRingMode -avoid_short false }
catch { setAddRingMode -extend_over_row false }
catch { setAddRingMode -ignore_rows false }
catch { setAddRingMode -orthogonal_only true }
catch { setAddRingMode -ring_target default }
catch { setAddRingMode -skip_crossing_trunks none }
catch { setAddRingMode -skip_via_on_pin standardcell }
catch { setAddRingMode -skip_via_on_wire_shape noshape }
catch { setAddRingMode -stacked_via_bottom_layer ME1 }
catch { setAddRingMode -stacked_via_top_layer AL_RDL }
catch { setAddRingMode -via_using_exact_crossover_size true }
catch { setSIMode -separate_delta_delay_on_data true }
catch { setAddStripeMode -allow_jog {padcore_ring  block_ring} }
catch { setAddStripeMode -break_at none }
catch { setAddStripeMode -extend_to_closest_target none }
catch { setAddStripeMode -ignore_block_check false }
catch { setAddStripeMode -ignore_nondefault_domains false }
catch { setAddStripeMode -orthogonal_only true }
catch { setAddStripeMode -partial_set_thru_domain false }
catch { setAddStripeMode -route_over_rows_only false }
catch { setAddStripeMode -rows_without_stripes_only false }
catch { setAddStripeMode -spacing_from_block 0 }
catch { setAddStripeMode -spacing_type edge_to_edge }
catch { setAddStripeMode -split_vias false }
catch { setAddStripeMode -stacked_via_bottom_layer ME1 }
catch { setAddStripeMode -stacked_via_top_layer AL_RDL }
catch { setAddStripeMode -stop_at_last_wire_for_area false }
catch { setAddStripeMode -stripe_min_length 0 }
catch { setAddStripeMode -trim_antenna_back_to_shape none }
catch { setAddStripeMode -via_using_exact_crossover_size false }
catch { setRouteMode -earlyGlobalRouteSecondPG false }
